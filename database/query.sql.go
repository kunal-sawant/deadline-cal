// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO Tasks (TASK_NAME,START_DATE,END_DATE) VALUES
(?, ?, ?) RETURNING id, task_name, start_date, end_date
`

type CreateTaskParams struct {
	TaskName  string
	StartDate string
	EndDate   string
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.TaskName, arg.StartDate, arg.EndDate)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TaskName,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM Tasks
WHERE ID = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const listTasks = `-- name: ListTasks :many
SELECT id, task_name, start_date, end_date FROM Tasks
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.TaskName,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
